import asyncio
import logging
import sys
from os import getenv

import time

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

from typing import Optional

import game

TOKEN = getenv("BOT_TOKEN")

dp = Dispatcher()

color = ["üü¢", "üî¥"]

game_instance = {}
player_id = {}
player_name = {}
last_move_time = {}


class SelectionCallback(CallbackData, prefix="selection"):
    player: int


class MoveCallback(CallbackData, prefix="move"):
    x: int
    y: int


@dp.message(CommandStart())
async def command_start_handler(message: Message):
    await message.answer(f"/game –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã\n/help –¥–ª—è –ø—Ä–∞–≤–∏–ª")


async def get_game_id(message: Message):
    return message.chat.id


async def get_selection_keyboard(game_id: Optional[int] = None):
    player_selection = InlineKeyboardBuilder()
    for i in range(2):
        if game_id is None:
            player_selection.button(text=f"–°–≤–æ–±–æ–¥–Ω–æ", callback_data=SelectionCallback(player=i))
        elif player_id[game_id][i]:
            player_selection.button(text=player_name[game_id][i], callback_data=SelectionCallback(player=-1))
        else:
            player_selection.button(text=f"–°–≤–æ–±–æ–¥–Ω–æ", callback_data=SelectionCallback(player=i))
    return player_selection.as_markup()


async def get_move_keyboard(game_id: int):
    field = InlineKeyboardBuilder()
    for x in range(game.height):
        for y in range(game.width):
            field.button(text=await game_instance[game_id].get(x, y), callback_data=MoveCallback(x=x, y=y))
    field.button(text="–°–¥–∞—Ç—å—Å—è", callback_data=MoveCallback(x=-1, y=-1))
    return field.as_markup()


async def get_game_text(game_id: int):
    return (
        f"{player_name[game_id][0]} –ø—Ä–æ—Ç–∏–≤ {player_name[game_id][1]}\n"
        f"<b>–•–æ–¥–∏—Ç:</b> {player_name[game_id][game_instance[game_id].currentPlayer]}\n"
        f"<b>–û—Å—Ç–∞–ª–æ—Å—å —Ö–æ–¥–æ–≤:</b> {game_instance[game_id].movesLeft}"
    )


@dp.message(Command("help"))
async def command_game_handler(message: Message):
    await message.answer(
        """–ù–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–º –ø–æ–ª–µ 8 –Ω–∞ 10 –∏–≥—Ä–∞—é—Ç –¥–≤–æ–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è –∏–∑ —Å–µ–±—è –≤—Ä–∞–∂–¥—É—é—â–∏–µ 
        "–≤–∏—Ä—É—Å—ã". –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —É –∫–∞–∂–¥–æ–≥–æ –ø–æ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —É–≥–ª–∞—Ö –∏ –∏–º–µ—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–∂–∏–≤—ã—Ö". 
        –•–æ–¥—è—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–∏—á–µ–º –ø–æ 3 –¥–µ–π—Å—Ç–≤–∏—è —Å—Ä–∞–∑—É, –≤–æ –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é "–∂–∏–≤—É—é –∫–ª–µ—Ç–∫—É", 
        –Ω–æ —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ —Å–æ—Å–µ–¥–Ω–µ–π —Å –∫–∞–∫–æ–π-—Ç–æ –∫–ª–µ—Ç–∫–æ–π, —á—Ç–æ —É–∂–µ –∫–∞–∫-—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π 
        "–∂–∏–≤–æ–π", –ª–∏–±–æ —Å—ä–µ—Å—Ç—å "–∂–∏–≤—É—é" –∫–ª–µ—Ç–∫—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —Å–æ—Å–µ–¥–Ω–µ–π —Å–≤–æ–µ–π –∫ –Ω–µ–π, –Ω–æ —Ç–∞ —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ 
        —Å–æ–µ–¥–∏–Ω–µ–Ω–∞ —Å "–∂–∏–≤–æ–π", –¥–µ–ª–∞—è –ø—Ä–∏ —ç—Ç–æ–º –æ–±—Ä–µ—Ç–µ–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π "–º–µ—Ä—Ç–≤–æ–π". "–ú–µ—Ä—Ç–≤—ã–µ" –∫–ª–µ—Ç–∫–∏ —É–∂–µ –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç 
        –ø–µ—Ä–µ—Å—ä–µ–¥–µ–Ω–∏—é, –æ–Ω–∏ –ª–∏—à—å —Å–ª—É–∂–∞—Ç "—Ç—Ä–æ–ø–æ–π", –ø—Ä–∏—Ç–æ–º –Ω–æ–≤—ã—Ö "–∂–∏–≤—ã—Ö" —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–µ –º–æ–≥—É—Ç –æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å. –°–æ—Å–µ–¥–Ω–∏–º–∏ 
        –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–ª–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –æ–±—â—É—é —Å—Ç–æ—Ä–æ–Ω—É. –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥."""
    )


@dp.message(Command("game"))
async def command_game_handler(message: Message):
    game_id = await get_game_id(message)
    if game_id in game_instance:
        await message.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—è –ø–∞—Ä—Ç–∏—è!")
        return
    await message.answer("<i>–û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤</i>", reply_markup=await get_selection_keyboard())
    game_instance[game_id] = game.Instance()
    player_id[game_id] = [None, None]
    player_name[game_id] = [None, None]
    last_move_time[game_id] = time.time()


@dp.callback_query(SelectionCallback.filter())
async def callbacks_selection(
        callback: types.CallbackQuery,
        callback_data: SelectionCallback
):
    game_id = await get_game_id(callback.message)
    if callback_data.player != -1:
        player_id[game_id][callback_data.player] = callback.from_user.id
        player_name[game_id][callback_data.player] = f"{color[callback_data.player]} {callback.from_user.first_name}"
        await callback.answer()
        await callback.message.edit_reply_markup(reply_markup=await get_selection_keyboard(game_id))
        if player_id[game_id][0] and player_id[game_id][1]:
            for i in [3, 2, 1]:
                await callback.message.edit_text(f"<b>–ù–∞—á–∞–ª–æ —á–µ—Ä–µ–∑:</b> {i}")
                await asyncio.sleep(1)
            await game_instance[game_id].setup()
            await callback.message.edit_text(await get_game_text(game_id), reply_markup=await get_move_keyboard(game_id))
    else:
        await callback.answer("–ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ")


async def end_game(callback, game_id: int, text: str = ""):
    await callback.message.answer(
        text=f"{player_name[game_id][0]} –ø—Ä–æ—Ç–∏–≤ {player_name[game_id][1]}\n"
             f"<b>–ü–æ–±–µ–¥–∏–ª</b> {player_name[game_id][(game_instance[game_id].currentPlayer + 1) % 2]} "
             + text
    )
    await callback.message.delete()
    del game_instance[game_id]
    del player_id[game_id]
    del player_name[game_id]
    del last_move_time[game_id]


@dp.callback_query(MoveCallback.filter())
async def callbacks_move(
        callback: types.CallbackQuery,
        callback_data: MoveCallback
):
    game_id = await get_game_id(callback.message)
    if callback.from_user.id != player_id[game_id][game_instance[game_id].currentPlayer]:
        await callback.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥")
        return
    now = time.time()
    if now - last_move_time[game_id] < 1:
        await callback.answer("–•–æ–¥–∏—Ç–µ –Ω–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ")
        return
    x = callback_data.x
    y = callback_data.y
    if x == -1:
        await end_game(callback, game_id, "(–°–¥–∞—á–∞ –ø–∞—Ä—Ç–∏–∏)")
        return
    if not await game_instance[game_id].move(x, y):
        await callback.answer("–•–æ–¥ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        return
    if await game_instance[game_id].is_over():
        await end_game(callback, game_id)
        return
    await callback.message.edit_text(await get_game_text(game_id), reply_markup=await get_move_keyboard(game_id))
    last_move_time[game_id] = time.time()


async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
